mainPanel(
leafletOutput("mapa")
)
)
)
)
server <- function(input, output, session) {
# Initial map setup for the Torch Route
output$mapa <- renderLeaflet({
leaflet() %>%
addTiles()
})
# Update the map according to the selected date
observe({
output$mapa <- renderLeaflet({
visualize_torch_route(torch_data, input$date)
})
})
# Visualization of country rankings
output$rankingPlot <- renderPlotly({
visualize_country_rankings(rank_data, input$dateRange)
})
# Third visualization: Age distribution of medalists
output$age_plot <- renderPlot({
visualize_medalist_ages(athletes_data, rank_data, team_data, input$sports)
})
# Reactive expression to load medal data
medal_data <- reactive({
data <- load_medal_data("C:/Users/Dusan/OneDrive - UPR/FAMNIT/II semestar/Vizualizacija podatkov/projekat ol/archive(2)")
if (is.null(data)) {
# Return an empty data frame if data is not loaded
return(data.frame(NOC = character(), Year = numeric(), Gold = numeric(), Silver = numeric(), Bronze = numeric(), Total = numeric()))
}
return(data)
})
# Update the list of countries in the dropdown menu
observe({
data <- medal_data()
if (nrow(data) > 0) {
updateSelectizeInput(session, "countries",
choices = sort(unique(data$NOC)),
selected = c("USA", "SRB", "SLO", "FRA", "GRE"))
}
})
# Render the plot for the medal table
output$medalTablePlot <- renderPlotly({
data <- medal_data()
if (nrow(data) == 0) {
return(NULL)  # Return NULL if no data is available
}
visualize_medal_table(data, input$countries)
})
# Fourth visualization: Athlete counts by country and gender
output$athlete_count_plot <- renderPlot({
visualize_athlete_counts_by_gender(athletes_data, team_data, input$selected_countries_2)
})
# Fifth visualization: Medal counts by country and gender
output$medal_count_plot <- renderPlot({
visualize_medal_counts_by_gender(rank_data, team_data, input$selected_countries_2)
})
# Sixth visualization: Weight differences between male and female athletes
output$weight_plot <- renderPlot({
visualize_weight_differences(athletes_data, team_data)
})
# Seventh visualization: Height differences between male and female athletes
output$height_plot <- renderPlot({
visualize_height_differences(athletes_data, team_data)
})
# Initial setup of selected countries for comparison
updateSelectizeInput(session, "selected_countries_2",
choices = athletes_data$country_code,
selected = c("USA", "SRB", "SLO", "FRA", "GRE"))
}
# Launch the Shiny application
shinyApp(ui, server)
# Required packages
library(tidygeocoder)
library(leaflet)
library(dplyr)
library(shiny)
library(readr)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(plotly)
library(DT)
library(stringr)
library(cowplot)
# Function to load sports data from a single CSV file
load_sport_data <- function(file_path) {
read_csv(file_path, col_types = cols(.default = "c")) %>%
mutate(across(where(is.character), ~na_if(., "")))
}
# Function to load sports data from multiple CSV files in a folder
load_sport_data <- function(folder_path) {
files <- list.files(folder_path, full.names = TRUE, pattern = "\\.csv$")
data <- map_df(files, function(file) {
df <- read_csv(file, col_types = cols(.default = "c"))  # Load all columns as character type
df <- df %>% mutate(across(where(is.character), ~na_if(., "")))  # Replace empty strings with NA
return(df)
})
return(data)
}
# Function to load medal data with the year extracted from the filename
load_medal_data <- function(folder_path) {
files <- list.files(folder_path, full.names = TRUE, pattern = "\\.csv$")
data <- map_df(files, function(file) {
filename <- basename(file)
year <- as.numeric(str_extract(filename, "\\d{4}"))
if (is.na(year)) {
warning(paste("Could not extract year from filename:", filename))
return(NULL)
}
df <- read_csv(file, col_types = cols(
NOC = col_character(),
Gold = col_number(),
Silver = col_number(),
Bronze = col_number(),
Total = col_number()
))
df$Year <- year
return(df)
})
}
# Load data from CSV files
torch_data <- read_csv("C:/Users/Dusan/OneDrive - UPR/FAMNIT/II semestar/Vizualizacija podatkov/projekat ol/archive(1)/torch_route.csv")
rank_data <- read_csv("C:/Users/Dusan/OneDrive - UPR/FAMNIT/II semestar/Vizualizacija podatkov/projekat ol/archive(1)/medals.csv")
sport_data <- load_sport_data("C:/Users/Dusan/OneDrive - UPR/FAMNIT/II semestar/Vizualizacija podatkov/projekat ol/archive(1)/results")
athletes_data <- read_csv("C:/Users/Dusan/OneDrive - UPR/FAMNIT/II semestar/Vizualizacija podatkov/projekat ol/archive(1)/athletes.csv")
team_data <- read_csv("C:/Users/Dusan/OneDrive - UPR/FAMNIT/II semestar/Vizualizacija podatkov/projekat ol/archive(1)/teams.csv")
# Geocoding to obtain latitude and longitude based on city names
torch_data <- torch_data %>%
filter(!is.na(city)) %>%  # Filter rows with valid city names
geocode(city, method = 'osm', lat = lat, long = lon)
# Convert dates to POSIXct format for easier manipulation
torch_data$date_start <- as.POSIXct(torch_data$date_start, format="%Y-%m-%dT%H:%M:%SZ", tz="UTC")
torch_data$date_end <- as.POSIXct(torch_data$date_end, format="%Y-%m-%dT%H:%M:%SZ", tz="UTC")
# Prepare rank_data by adding medal values
rank_data <- rank_data %>%
mutate(medal_date = as.Date(medal_date)) %>%
mutate(medal_value = case_when(
medal_type == "Gold Medal" ~ 3,
medal_type == "Silver Medal" ~ 2,
medal_type == "Bronze Medal" ~ 1,
TRUE ~ 0
))
# Function to visualize the Olympic torch route
visualize_torch_route <- function(torch_data, input_date) {
# Filter data by the selected date
filtered_data <- torch_data %>%
filter(date_start <= input_date) %>%  # Show all locations up to the selected date
arrange(date_start)  # Sort by date to maintain chronological order
# Create a map with markers and lines
leaflet() %>%
addTiles() %>%
addMarkers(data = filtered_data, ~lon, ~lat, popup = ~paste("<strong>", title, "</strong><br>",
"City: ", city, "<br>",
"Start: ", date_start, "<br>",
"End: ", date_end, "<br>",
"URL: <a href='", url, "'>", url, "</a>")) %>%
addPolylines(data = filtered_data, ~lon, ~lat, color = "blue", weight = 4, opacity = 0.7)
}
# Function to visualize country rankings over time
visualize_country_rankings <- function(rank_data, date_range, color_scheme = "viridis") {
filtered_data <- rank_data %>%
filter(medal_date >= date_range[1] & medal_date <= date_range[2]) %>%
group_by(country_code, medal_date) %>%
summarise(daily_medals = sum(medal_value), .groups = "drop") %>%
arrange(medal_date) %>%
group_by(country_code) %>%
mutate(cumulative_medals = cumsum(daily_medals)) %>%
ungroup()
# Calculate daily rankings
daily_ranks <- filtered_data %>%
group_by(medal_date) %>%
mutate(rank = rank(-cumulative_medals, ties.method = "min")) %>%
ungroup()
# Select the top 10 countries by total medals
top_countries <- daily_ranks %>%
group_by(country_code) %>%
summarise(total_medals = sum(daily_medals), .groups = "drop") %>%
top_n(10, total_medals) %>%
pull(country_code)
# Filter data for the top 10 countries
plot_data <- daily_ranks %>%
filter(country_code %in% top_countries)
# Create the plot
p <- ggplot(plot_data, aes(x = medal_date, y = rank, color = country_code, group = country_code)) +
geom_line(size = 1) +
geom_point(size = 2) +
scale_y_reverse(breaks = 1:10) +
scale_color_manual(values = get_color_palette(top_countries, color_scheme)) +
labs(title = "Countries ranked by overall medals after each competition day",
x = "Competition day",
y = "Rank",
color = "Country") +
theme_minimal() +
theme(legend.position = "right")
# Convert ggplot to interactive plotly plot
ggplotly(p)
}
# Helper function to get the color palette
get_color_palette <- function(country_codes, color_scheme) {
color_palettes <- list(
"viridis" = viridis::viridis(length(country_codes)),
"inferno" = viridis::inferno(length(country_codes)),
"plasma" = viridis::plasma(length(country_codes)),
"magma" = viridis::magma(length(country_codes)),
"turbo" = viridis::turbo(length(country_codes)),
"rainbow" = rainbow(length(country_codes))
)
color_palette <- color_palettes[[color_scheme]]
names(color_palette) <- country_codes
return(color_palette)
}
# Function to visualize the distribution of ages among medalists
visualize_medalist_ages <- function(athletes_data, rank_data, team_data, selected_sports = NULL) {
# Ensure 'code' column is character type in all data frames
athletes_data <- athletes_data %>% mutate(code = as.character(code))
rank_data <- rank_data %>% mutate(code = as.character(code))
team_data <- team_data %>% mutate(code = as.character(code))
# Merge medal data with athlete data
merged_data <- rank_data %>%
left_join(athletes_data, by = "code") %>%
filter(!is.na(medal_type))  # Remove those who did not win a medal
# Process team medals
team_medals <- merged_data %>%
filter(is.na(birth_date)) %>%
left_join(team_data, by = "code") %>%
mutate(athletes_codes = strsplit(athletes_codes, ",")) %>%
unnest(athletes_codes) %>%
left_join(athletes_data, by = c("athletes_codes" = "code")) %>%
select(-birth_date.x) %>%
rename(birth_date = birth_date.y)
# Combine individual and team medals
all_medals <- bind_rows(
merged_data %>% filter(!is.na(birth_date)),
team_medals
)
# Calculate age
all_medals <- all_medals %>%
mutate(birth_date = ymd(birth_date),
age = year(as.Date("2024-07-26")) - year(birth_date))  # Assumed date of the 2024 Olympics
# Filter by selected sports
if (!is.null(selected_sports) && length(selected_sports) > 0) {
all_medals <- all_medals %>% filter(discipline %in% selected_sports)
}
# Create the plot
p <- ggplot(all_medals, aes(x = discipline, y = age, fill = medal_type)) +
geom_boxplot() +
labs(title = "Distribution of ages among medalists by discipline and medal type",
x = "Discipline",
y = "Age",
fill = "Medal type") +
scale_fill_manual(values = c("Gold Medal" = "#FFD700",
"Silver Medal" = "#C0C0C0",
"Bronze Medal" = "#CD7F32")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "right") +
coord_flip()
return(p)
}
# Function to visualize the Olympic medal table
visualize_medal_table <- function(medal_data, selected_countries = NULL) {
if (!is.null(selected_countries) && length(selected_countries) > 0) {
medal_data <- medal_data %>% filter(NOC %in% selected_countries)
}
plot_data <- medal_data %>%
gather(key = "Medal", value = "Count", Gold, Silver, Bronze) %>%
mutate(Medal = factor(Medal, levels = c("Gold", "Silver", "Bronze")))
p <- ggplot(plot_data, aes(x = Year, y = NOC, size = Count, color = Medal)) +
geom_point(alpha = 0.7) +
scale_color_manual(values = c("Gold" = "#FFD700", "Silver" = "#C0C0C0", "Bronze" = "#CD7F32")) +
scale_size_continuous(range = c(1, 15)) +
labs(title = "Olympic Summer Games Medal Table",
subtitle = "Hover over a dot to see the medal distribution.",
x = "Year", y = "Country") +
theme_minimal() +
theme(legend.position = "bottom",
axis.text.y = element_text(size = 8))
ggplotly(p, tooltip = c("NOC", "Year", "Medal", "Count"))
}
# Function to visualize the number of athletes by gender for selected countries
visualize_athlete_counts_by_gender <- function(athletes_data, team_data, selected_countries_2 = c("USA", "SRB", "SLO", "FRA", "GRE")) {
# Calculate the number of athletes by country and gender
athlete_counts <- athletes_data %>%
group_by(country_code, gender) %>%
summarize(count = n()) %>%
ungroup()
# Create the plot
p <- ggplot(athlete_counts, aes(x = country_code, y = count, fill = gender)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Number of athletes by country and gender",
x = "Country", y = "Number of athletes", fill = "Gender") +
scale_fill_manual(values = c("Male" = "#1f77b4", "Female" = "#ff1d8d")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "right")
# Filter by selected countries
p + coord_flip() +
scale_x_discrete(limits = selected_countries_2)
}
# Function to visualize the number of medals by gender for selected countries
visualize_medal_counts_by_gender <- function(rank_data, team_data, selected_countries_2=c("USA", "SRB", "SLO", "FRA", "GRE")) {
# Combine individual and team medals
all_medals <- bind_rows(
rank_data %>% mutate(gender = "Individual"),
team_data %>%
mutate(athletes_codes = strsplit(athletes_codes, ",")) %>%
unnest(athletes_codes) %>%
left_join(rank_data, by = c("athletes_codes" = "code")) %>%
mutate(gender = "Team")
)
# Calculate the number of medals by country and gender
medal_counts <- rank_data %>%
filter(gender %in% c("M", "W")) %>%
group_by(country_code, gender) %>%
summarize(count = n()) %>%
ungroup()
# Create the plot
p <- ggplot(medal_counts, aes(x = country_code, y = count, fill = gender)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Number of medals by country and gender",
x = "Country", y = "Number of medals", fill = "Gender") +
scale_fill_manual(values = c("M" = "#1f77b4", "W" = "#ff1d8d")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.position = "right")
# Filter by selected countries
p + coord_flip() +
scale_x_discrete(limits = selected_countries_2)
}
# Function to visualize the weight differences between male and female athletes
visualize_weight_differences <- function(athletes_data, team_data) {
# Create the plot
p <- ggplot(athletes_data, aes(x = gender, y = weight)) +
geom_boxplot() +
labs(title = "Weight differences between male and female athletes",
x = "Gender", y = "Weight (kg)") +
scale_x_discrete(labels = c("Female", "Male")) +
theme_minimal()
return(p)
}
# Function to visualize the height differences between male and female athletes
visualize_height_differences <- function(athletes_data, team_data) {
# Create the plot
p <- ggplot(athletes_data, aes(x = gender, y = height)) +
geom_boxplot() +
labs(title = "Height differences between male and female athletes",
x = "Gender", y = "Height (cm)") +
scale_x_discrete(labels = c("Female", "Male")) +
scale_y_continuous(limits = c(140, NA)) +  # Set the lower limit of the y-axis to 140 cm
theme_minimal()
return(p)
}
# Creating the Shiny application with a navigation menu
ui <- navbarPage("Olympic Games 2024 - by Dušan Todorović",
# Country Rankings
tabPanel("Country Rankings",
sidebarLayout(
sidebarPanel(
dateRangeInput("dateRange", "Select Period:",
start = min(rank_data$medal_date),
end = max(rank_data$medal_date),
min = min(rank_data$medal_date),
max = max(rank_data$medal_date)),
selectInput("colorScheme", "Color Scheme",
choices = c("viridis", "inferno", "plasma", "magma", "turbo", "rainbow"),
selected = "viridis")
),
mainPanel(
plotlyOutput("rankingPlot", height = "600px")
)
)
),
tabPanel("Gender Differences",
sidebarLayout(
sidebarPanel(
selectizeInput("selected_countries_2", "Select Countries:",
choices = athletes_data$country_code,
multiple = TRUE,
selected = c("USA", "SRB", "SLO", "FRA", "GRE"))
),
mainPanel(
fluidRow(
column(6, plotOutput("athlete_count_plot", height = "400px")),
column(6, plotOutput("medal_count_plot", height = "400px"))
),
fluidRow(
column(6, plotOutput("weight_plot", height = "400px")),
column(6, plotOutput("height_plot", height = "400px"))
)
)
)),
# Additional visualizations remain the same
tabPanel("Medalist Ages",
sidebarLayout(
sidebarPanel(
selectizeInput("sports", "Select Sports:",
choices = unique(rank_data$discipline),
multiple = TRUE,
selected = unique(rank_data$discipline)[1:5])  # First 5 sports selected by default
),
mainPanel(
plotOutput("age_plot", height = "600px")
)
)
),
tabPanel("Medal Table",
sidebarLayout(
sidebarPanel(
selectizeInput("countries", "Select Countries:",
choices = NULL,
multiple = TRUE,
options = list(placeholder = "Select countries"))
),
mainPanel(
plotlyOutput("medalTablePlot", height = "600px")
)
)
),
# Olympic Torch Route
tabPanel("Torch Route",
sidebarLayout(
sidebarPanel(
sliderInput("date", "Select Date:",
min = min(torch_data$date_start),
max = max(torch_data$date_end),
value = min(torch_data$date_start),
timeFormat = "%Y-%m-%d",
step = 86400,  # One day
animate = animationOptions(interval = 500, loop = TRUE)
)
),
mainPanel(
leafletOutput("mapa")
)
)
)
)
server <- function(input, output, session) {
# Initial map setup for the Torch Route
output$mapa <- renderLeaflet({
leaflet() %>%
addTiles()
})
# Update the map according to the selected date
observe({
output$mapa <- renderLeaflet({
visualize_torch_route(torch_data, input$date)
})
})
# Visualization of country rankings
output$rankingPlot <- renderPlotly({
visualize_country_rankings(rank_data, input$dateRange, input$colorScheme)
})
# Third visualization: Age distribution of medalists
output$age_plot <- renderPlot({
visualize_medalist_ages(athletes_data, rank_data, team_data, input$sports)
})
# Reactive expression to load medal data
medal_data <- reactive({
data <- load_medal_data("C:/Users/Dusan/OneDrive - UPR/FAMNIT/II semestar/Vizualizacija podatkov/projekat ol/archive(2)")
if (is.null(data)) {
# Return an empty data frame if data is not loaded
return(data.frame(NOC = character(), Year = numeric(), Gold = numeric(), Silver = numeric(), Bronze = numeric(), Total = numeric()))
}
return(data)
})
# Update the list of countries in the dropdown menu
observe({
data <- medal_data()
if (nrow(data) > 0) {
updateSelectizeInput(session, "countries",
choices = sort(unique(data$NOC)),
selected = c("USA", "SRB", "SLO", "FRA", "GRE"))
}
})
# Render the plot for the medal table
output$medalTablePlot <- renderPlotly({
data <- medal_data()
if (nrow(data) == 0) {
return(NULL)  # Return NULL if no data is available
}
visualize_medal_table(data, input$countries)
})
# Fourth visualization: Athlete counts by country and gender
output$athlete_count_plot <- renderPlot({
visualize_athlete_counts_by_gender(athletes_data, team_data, input$selected_countries_2)
})
# Fifth visualization: Medal counts by country and gender
output$medal_count_plot <- renderPlot({
visualize_medal_counts_by_gender(rank_data, team_data, input$selected_countries_2)
})
# Sixth visualization: Weight differences between male and female athletes
output$weight_plot <- renderPlot({
visualize_weight_differences(athletes_data, team_data)
})
# Seventh visualization: Height differences between male and female athletes
output$height_plot <- renderPlot({
visualize_height_differences(athletes_data, team_data)
})
# Initial setup of selected countries for comparison
updateSelectizeInput(session, "selected_countries_2",
choices = athletes_data$country_code,
selected = c("USA", "SRB", "SLO", "FRA", "GRE"))
}
# Launch the Shiny application
shinyApp(ui, server)
# Launch the Shiny application
shinyApp(ui, server)
